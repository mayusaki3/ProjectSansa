@using Blazored.Modal
@using Blazored.Modal.Services
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject IModalService ModalService
@using System.Net.Http.Json
@inject HttpClient Http
@inject SessionService Session

@if (languages == default!)
{
    <div style="overflow-y: auto;">
    <p>リスト読み込み中...</p>
    </div>
}
else
{
    <div style="overflow-y: auto;">
        <select @bind="selectedLanguage" size="10">
            @foreach (var language in languages)
            {
                <option value="@language.Value">@language.Value</option>
            }
        </select>
    </div>

    <button @onclick="SwitchLanguage">言語を切り替える</button>
}

@code {
    /// <summary>
    /// モーダルインスタンス
    /// </summary>
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    /// <summary>
    /// 選択した言語コード
    /// </summary>
    private string selectedLanguage = default!;

    /// <summary>
    /// 言語リスト
    /// </summary>
    private List<KeyValuePair<string, string>> languages = default!;

    /// <summary>
    /// 言語リスト初期化
    /// </summary>
    /// <param name="firstRender">初回レンダリング</param>
    /// <returns>タスク</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selectedLanguage = Session.DisplayLanguageName;
            var result = await Http.GetFromJsonAsync<IEnumerable<KeyValuePair<string, string>>>("api/languages");
            languages = result?.ToList() ?? new List<KeyValuePair<string, string>>();
            StateHasChanged();
        }
    }

    /// <summary>
    /// 言語切替処理
    /// </summary>
    private async Task SwitchLanguage()
    {
        // 選択した言語をセッションに設定
        Session.DisplayLanguageName = selectedLanguage;
        foreach (var language in languages)
        {
            if (language.Value == selectedLanguage)
            {
                Session.DisplayLanguageCode = language.Key;
                break;
            }
        }
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }
}
